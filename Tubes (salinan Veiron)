package main

import "fmt"

const NMAX int = 1024

type barber struct {
	nama    string
	tanggal [NMAX]int
	rating  int
	harga   int
}

type Arrint [NMAX]barber
type ArrNew [NMAX]barber
type Arrharga [NMAX]int

var x, nData int
var data Arrint
var dataHarga Arrharga

func main() {
	start()
}

func start() {
	fmt.Println("Siapa anda?", "\n1. Admin", "\n2. Customer")
	fmt.Scan(&x)
	if x == 1 {
		menuAdmin()
	} else if x == 2 {
		menuCustomer()
	} else {
		fmt.Println("Masukan tidak valid, silahkan pilih kembali")
		start()
	}
}

func menuAdmin() {
	fmt.Println("1. Masukkan data", "\n0. Kembali ke menu")
	fmt.Scan(&x)
	if x == 0 {
		start()
	} else if x == 1 {
		fmt.Println("Berapa banyak barber yang akan diinput?")
		fmt.Scan(&nData)
		inputBarber(&data, &dataHarga, &nData)
		menuAdmin()
	} else {
		fmt.Println("Masukan tidak valid, silahkan pilih kembali")
		menuAdmin()
	}
}

func menuCustomer() {
	var namaDicari string
	fmt.Println("1. Lihat list barber", "\n2. Cari nama barber", "\n3. Cari berdasarkan range harga", "\n0. Kembali")
	fmt.Scan(&x)
	if x == 1 {
		fmt.Println("Berikut adalah list barber kami")
		cetakListBarber(data, dataHarga, nData)
	} else if x == 2 {
		cariNamaBarber(data, nData, namaDicari)
	} else if x == 3 {
		cariRange(&data, &dataHarga, nData)

	} else if x == 0 {
		start()
	} else {
		fmt.Println("Masukan tidak valid, silahkan pilih kembali")
		menuCustomer()
	}
}
func cariRange(A *Arrint, Ah *Arrharga, nData int) {
	var low, high int
	var index Arrharga
	var ARange ArrNew
	sorting(&data, &dataHarga, nData)
	fmt.Println("Masukkan batas bawah dan batas atas harga:")
	fmt.Scan(&low, &high)
	count := findRange(dataHarga, low, high, nData, &index)
	if count != 0 {
		fmt.Println("Data dalam rentang harga:")
		for i := 0; i < count; i++ {
			idx := index[i] // Use the index directly
			ARange[i].nama = data[idx].nama
			ARange[i].harga = data[idx].harga
			ARange[i].rating = data[idx].rating
			// Copy the tanggal array
			for j := 0; j < NMAX; j++ {
				ARange[i].tanggal[j] = data[idx].tanggal[j]
			}
			fmt.Printf("%d. Nama: %s, Harga: %d, Rating: %d, Tanggal: ", i+1, ARange[i].nama, ARange[i].harga, ARange[i].rating)
			for j := 0; j < NMAX && ARange[i].tanggal[j] != 0; j++ {
				fmt.Printf("%d ", ARange[i].tanggal[j])
			}
			fmt.Println()
		}
		bookingRange(ARange, count)
	} else {
		fmt.Println("Tidak ada barber dalam range tersebut")
		cariRange(A, Ah, nData)

	}
}

func inputBarber(A *Arrint, Ah *Arrharga, n *int) {
	if *n > NMAX {
		*n = NMAX
	}
	var i, j, tanggal int
	fmt.Println("Masukkan nama, harga, dan rating barber")
	for i = 0; i < *n; i++ {
		fmt.Scan(&A[i].nama, &A[i].harga, &A[i].rating)
		Ah[i] = A[i].harga
		fmt.Println("Masukkan tanggal (masukkan 0 untuk berhenti):")
		j = 0
		for {
			fmt.Scan(&tanggal)
			if tanggal == 0 {
				break
			}
			if j < NMAX {
				if !tanggalSudahAda(A[i].tanggal, j, tanggal) {
					A[i].tanggal[j] = tanggal
					j++
				} else {
					fmt.Println("Tanggal sudah ada, masukkan tanggal lain:")
				}
			} else {
				fmt.Println("Jumlah tanggal yang dimasukkan telah mencapai batas maksimal.")
				break
			}
		}
		if i < *n-1 {
			fmt.Println("Barber berikutnya")
		}
	}
}

func tanggalSudahAda(tanggalArr [NMAX]int, n int, tanggal int) bool {
	for i := 0; i < n; i++ {
		if tanggalArr[i] == tanggal {
			return true
		}
	}
	return false
}

func cetakListBarber(A Arrint, Ah Arrharga, n int) {
	var j, i, x int
	fmt.Println("1. Urutkan berdasarkan harga (murah-mahal)", "\n2. Urutkan berdasarkan rating", "\n0. Kembali")
	fmt.Scan(&x)
	if x == 1 {
		sorting(&A, &Ah, n)
		for i = 0; i < n; i++ {
			fmt.Printf("%d. Nama: %s, Harga: %d, Rating: %d, Tanggal: ", i+1, A[i].nama, A[i].harga, A[i].rating)
			j = 0
			for A[i].tanggal[j] != 0 && j < NMAX {
				fmt.Printf("%d ", A[i].tanggal[j])
				j++
			}
			fmt.Println()
		}
		booking(A, n)
	} else if x == 2 {
		sortingRating(&A, n)
		for i = 0; i < n; i++ {
			fmt.Printf("%d. Nama: %s, Harga: %d, Rating: %d, Tanggal: ", i+1, A[i].nama, A[i].harga, A[i].rating)
			j := 0
			for A[i].tanggal[j] != 0 && j < NMAX {
				fmt.Printf("%d ", A[i].tanggal[j])
				j++
			}
			fmt.Println()
		}
		booking(A, n)
	} else if x == 0 {
		menuCustomer()
	} else {
		fmt.Println("Masukan tidak valid, silahkan pilih kembali")
		cetakListBarber(A, Ah, n)
	}

}

func cariNamaBarber(A Arrint, n int, namaBarber string) {
	var found bool
	var i, j, cetak int
	var namaDicari string

	fmt.Println("Masukkan nama yang ingin anda cari")
	fmt.Scan(&namaDicari)
	namaBarber = namaDicari
	for i = 0; i < n; i++ {
		if A[i].nama == namaBarber {
			fmt.Printf("Nama: %s, Harga: %d, Rating: %d, Tanggal: ", A[i].nama, A[i].harga, A[i].rating)
			j = 0
			for A[i].tanggal[j] != 0 && j < NMAX {
				fmt.Printf("%d ", A[i].tanggal[j])
				j++
			}
			fmt.Println()
			found = true
			cetak = i
			bookBarberdicari(A, n, namaBarber, cetak)

		}

	}

	if !found {
		fmt.Println("Barber dengan nama", namaBarber, "tidak ditemukan.")
		fmt.Println("silahkan cari lagi")
		cariNamaBarber(A, n, namaBarber)
	}

}

func bookBarberdicari(A Arrint, n int, namaBarber string, cetak int) {

	fmt.Println("Pilihlah pilihan dibawah")
	fmt.Println("1. Booking barber", "\n2. Cari barber lagi", "\n0. kembali")
	fmt.Scan(&x)
	if x == 1 {
		bookOrNotBarberdicari(A, n, cetak)

	} else if x == 2 {
		cariNamaBarber(A, n, namaBarber)
	} else if x == 0 {
		menuCustomer()
	} else {
		fmt.Println("Masukan tidak valid, silahkan pilih kembali")
		bookBarberdicari(A, n, namaBarber, cetak)
	}
}
func bookOrNotBarberdicari(A Arrint, n int, cetak int) {
	var tanggalDiinginkan int

	fmt.Println("Tanggal berapa yang kamu inginkan : ")
	fmt.Scan(&tanggalDiinginkan)

	if tanggalSudahAda(A[cetak].tanggal, n, tanggalDiinginkan) {
		// Print barber's details with available dates
		fmt.Printf("Nama: %s, Harga: %d, Rating: %d, Tanggal: %d", A[cetak].nama, A[cetak].harga, A[cetak].rating, tanggalDiinginkan)

		fmt.Println()

	} else {
		// If the desired date is not available, prompt for a different date
		fmt.Println("Tanggal tidak tersedia, pilih tanggal lain:")
		bookOrNotBarberdicari(A, n, cetak)
	}
}

func booking(A Arrint, n int) {
	fmt.Println("Pilihlah pilihan dibawah")
	fmt.Println("1. Booking barber", "\n0. Kembali")
	fmt.Scan(&x)
	if x == 1 {
		bookOrnot(A, n)
	} else if x == 0 {
		menuCustomer()
	} else {
		fmt.Println("Masukan tidak valid, silahkan pilih kembali")
		booking(A, n)
	}
}

func bookingRange(A ArrNew, n int) {
	fmt.Println("Pilihlah pilihan dibawah")
	fmt.Println("1. Booking barber", "\n0. Kembali")
	fmt.Scan(&x)
	if x == 1 {
		bookOrnotNew(A, n)
	} else if x == 0 {
		menuCustomer()
	} else {
		fmt.Println("Masukan tidak valid, silahkan pilih kembali")
		bookingRange(A, n)
	}
}

func bookOrnot(A Arrint, n int) {
	var index int

	// Input barber index
	fmt.Println("Pilih barber kamu : ")
	fmt.Scan(&index)

	// Input desired date

	// Check if the selected index is valid
	if index > n || index < 1 {
		fmt.Println("Pilihan tidak valid silahkan pilih barber lagi")
		bookOrnot(A, n)
		return
	}
	bookOrnotTanggal(A, n, index)
}

func bookOrnotTanggal(A Arrint, n int, idx int) {
	var tanggalDiinginkan, index, i int
	var ketemu bool
	fmt.Println("Tanggal berapa yang kamu inginkan : ")
	fmt.Scan(&tanggalDiinginkan)
	ketemu = false
	index = idx
	// Iterate through barbers
	for i < n && !ketemu {
		if index-1 == i {
			// Check if the desired date is available for booking
			if tanggalSudahAda(A[i].tanggal, n, tanggalDiinginkan) {
				// Print barber's details with available dates
				fmt.Printf("%d. Nama: %s, Harga: %d, Rating: %d, Tanggal: %d", i+1, A[i].nama, A[i].harga, A[i].rating, tanggalDiinginkan)

				fmt.Println()
				ketemu = true
			} else {
				// If the desired date is not available, prompt for a different date
				fmt.Println("Tanggal tidak tersedia, pilih tanggal lain:")
				bookOrnotTanggal(A, n, index)
			}
		}
		i++
	}
}

func bookOrnotNew(A ArrNew, n int) {
	var index int

	// Input barber index
	fmt.Println("Pilih barber kamu : ")
	fmt.Scan(&index)

	// Input desired date

	// Check if the selected index is valid
	if index > n || index < 1 {
		fmt.Println("Pilihan tidak valid silahkan pilih barber lagi")
		bookOrnotNew(A, n)
		return
	}
	bookOrnotNewTanggal(A, n, index)
}
func bookOrnotNewTanggal(A ArrNew, n int, idx int) {
	var tanggalDiinginkan, index, i int
	var ketemu bool
	fmt.Println("Tanggal berapa yang kamu inginkan : ")
	fmt.Scan(&tanggalDiinginkan)
	ketemu = false
	index = idx
	// Iterate through barbers
	for i < n && !ketemu {
		if index-1 == i {
			// Check if the desired date is available for booking
			if tanggalSudahAda(A[i].tanggal, n, tanggalDiinginkan) {
				// Print barber's details with available dates
				fmt.Printf("%d. Nama: %s, Harga: %d, Rating: %d, Tanggal: %d", i+1, A[i].nama, A[i].harga, A[i].rating, tanggalDiinginkan)

				fmt.Println()
				ketemu = true
			} else {
				// If the desired date is not available, prompt for a different date
				fmt.Println("Tanggal tidak tersedia, pilih tanggal lain:")
				bookOrnotNewTanggal(A, n, index)
			}
		}
		i++
	}
}

func sorting(A *Arrint, Ah *Arrharga, n int) {
	var i, j, minIdx int
	var temp int
	var tempBarber barber
	for i = 0; i < n-1; i++ {
		minIdx = i
		for j = i + 1; j < n; j++ {
			if Ah[j] < Ah[minIdx] {
				minIdx = j
			}
		}
		temp = Ah[i]
		Ah[i] = Ah[minIdx]
		Ah[minIdx] = temp
		tempBarber = A[i]
		A[i] = A[minIdx]
		A[minIdx] = tempBarber
	}
}

func sortingRating(A *Arrint, n int) {
	var i, j, minIdx int
	var tempBarber barber
	for i = 0; i < n-1; i++ {
		minIdx = i
		for j = i + 1; j < n; j++ {
			if A[j].rating > A[minIdx].rating {
				minIdx = j
			}
		}
		tempBarber = A[i]
		A[i] = A[minIdx]
		A[minIdx] = tempBarber
	}
}

func findRange(Ah Arrharga, lower, upper, n int, indices *Arrharga) int {
	var i, count int
	count = 0
	for i = 0; i < n; i++ {
		if Ah[i] >= lower && Ah[i] <= upper {
			indices[count] = i
			count++
		}
	}
	return count
}
